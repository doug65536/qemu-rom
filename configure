#!/bin/bash
>wtf.log    #FIXME**********************************************
#set -x

>configure.log

verbose=1

# Reopen stdout as 3 so we can speak to the user while being logged
exec 3<>/dev/stderr

function fail() {
    echo Failed: "$@" 1>&2
    exit 1
}

logfile="configure.log"

function log() {
    if [[ $verbose != 0 ]]; then
        "$@" 2>&1 | tee -a "${logfile}" || exit
    else
        "$@" 2>&1 > "${logfile}" || exit    
    fi
}

#
# Find myself

ABS_SRC_DIR="$( cd "$( dirname \
        "${BASH_SOURCE[0]}" )"&> /dev/null && pwd )" || exit

SRC_DIR=$("${REALPATH:-realpath}" --relative-to="." "$ABS_SRC_DIR") || \
        fail 'Unable to deduce relative path to source'

#
# Process arguments

# removeswitch --host --host=greatness64-elf -> "greatness64-elf"
function removeswitch() { echo ${2#$1} ; }

WHICH=${WHICH:-which}
WHICH=$("$WHICH" -- "$WHICH") || \
		fail "Error getting full path to \"which\""

if [[ -z $NPROC ]]; then
	NPROC=$("$WHICH" -- nproc)
fi

function generate_toolchain() {
	log "${MKDIR:-mkdir}" -p tools || exit
	cd tools || exit
	
	# If there is no toolchain factory
	if [[ ! -d toolchains ]]; then
		# Create a toolchain factory
		url="${TOOLCHAINS_URL:-https://github.com/travisg/toolchains.git}"
		log "${GIT:-git}" clone "${url}" || exit
	fi
	
	# Try to find already built toolchain
	toolchain_root="$("${FIND:-find}" \
		"$PWD" -maxdepth 1 -name "$1-*")" || exit
	
	echo "toolchain_root=${toolchain_root}" >&3
	
	if [[ ! -f "${toolchain_root}/${COMPILER_PREFIX}g++" ]]; then
		cd toolchains || exit
		log ./doit -q -f -a "$1" \
			-o "$PWD/.." > "doit.log" 2>&1 || exit
		
		cd .. || exit
		toolchain_root="$("${FIND:-find}" \
			"$PWD" -maxdepth 1 -name "$1-*")" || exit
	else
		echo 'Already have compiler' >&3
	fi
	
	toolchain_bin="${toolchain_root}/bin"
	
	printf 'toolchain_bin=%s\n' "${toolchain_bin}" >&3
	printf '%s' "${toolchain_bin}" || exit
}

while [[ -n $1 ]]; do
    case "$1" in
    --host)
        HOST=$2
        shift
        ;;
    
    --host=*)
        HOST=$(removeswitch --host= "$1")
        printf 'Host set to %s\n' "${HOST}"
        ;;
    
    --enable-optimize)
        CXXFLAGS+=" -O2"
        ;;
    
    --enable-lto)
        CXXFLAGS+=" -O2 -flto=$("$NPROC")"
        ;;
    
    --enable-lto3)
        CXXFLAGS+=" -O3 -flto=$("$NPROC")"
        ;;
    --autopilot*)
        #mips mips64 sh4eb xtensaeb
        [[ $1 == '--autopilot=max' ]] \
            && declare -a arch_list=( \
                x86_64 i386 aarch64 riscv64 riscv32 alpha \
                mips64el mipsel sh4 arm sparc64 hppa ppc \
                ppc64 xtensa \
            ) \
            || [[ $1 == '--autopilot=x' ]] \
            && declare -a arch_list=( \
                x86_64 i386 aarch64 riscv64 ppc \
            ) \
            || declare -a arch_list=( \
                x86_64 i386 aarch64 \
            )
        
        for arch in "${arch_list[@]}"; do
            echo "Doing ${arch}..." >&3
            
            if ! "${FIND:-find}" tools -maxdepth 1 \
                    -name "${arch}-*" >/dev/null; then
                toolchain_path=$(generate_toolchain "${arch}") || exit
            fi
            echo "Got toolchain path ${toolchain_path}" >&3
            PATH="${toolchain_path}:${PATH}"
            mkdir -p "rombuild-${arch}" || exit
            pushd "rombuild-${arch}" || exit
            if log "${ABS_SRC_DIR}/configure" --host="${arch}-elf"; then
                echo cwd is "${PWD}"
                "${MAKE:-make}" clean run-nogdb \
                    && echo 'Run launch succeeded' >&3 \
                    || echo 'Run launch failed' >&3
            else
                echo 'Configure failed' >&3
            fi
            popd
        done || exit
        exit
        ;;
    -?|--help)
        echo -- '--host <toolchain prefix>'
        ;;
    *)
        fail "Unrecognized command line option: $1"
        ;;
    
    esac
    shift
done

HOST=${HOST:-x86_64-dgos}
ARCH=${ARCH:-${HOST%%-*}}    # x86_64
HOSTOS=${HOST#*-}            # dgos
COMPILER_PREFIX=${COMPILER_PREFIX:-"$HOST-"}

echo -- Configuring for $ARCH

SERIAL_DEBUGCON=$(printf "%s " \
    "-serial stdio")

DEBUG_CON=${DEBUG_CON:-"$SERIAL_DEBUGCON"}
QEMU_SMP=4
BIOS_IS_ELF=0

case "$ARCH" in
aarch64)
#    if [[ -z $GDB ]]; then
#        GDB=${GDB:-gdb-multiarch}
#    fi
    LINKER_EMULATION=${LINKER_EMULATION:-aarch64elf}
    QEMU_MACHINE=${QEMU_MACHINE:-$(printf "%s " \
        "-M virt" \
        "-machine gic-version=3" \
        "-machine virtualization=true" \
        "-machine secure=true")}
    QEMU_CPU=${QEMU_CPU:-"-cpu cortex-a72"}
    MARCH_FLAGS=${MARCH_FLAGS:-$(printf "%s " \
        '-march=armv8-a' \
        '-mstrict-align')}
    GDB_EXTRA_STARTUP_CMD='-ex '$'\'''set architecture arm'$'\''
    ;;
    
m68k)
    LINKER_EMULATION=m68kelf
    QEMU_MACHINE=${QEMU_MACHINE:-$(printf "%s " \
        "-M virt")}
    MARCH_FLAGS=${MARCH_FLAGS:-$(printf "%s " \
        "march=68060")}
    QEMU_CPU=${QEMU_CPU:-"-cpu m68060"}
    ;;
    
mips)
    QEMU_CPU=${QEMU_CPU:-"-cpu mips32r6-generic"}
    ;;

mips64)
    LINKER_EMULATION=${LINKER_EMULATION:-elf32ebmip}
    QEMU_CPU=${QEMU_CPU:-"-cpu MIPS64R2-generic"}
    ;;

mips64el)
    LINKER_EMULATION=${LINKER_EMULATION:-elf32elmip}
    QEMU_CPU=${QEMU_CPU:-"-cpu MIPS64R2-generic"}
    MARCH_FLAGS=${MARCH_FLAGS:--EL -mips64}
    ;;

alpha)
    QEMU_CPU=${QEMU_CPU:-"-cpu ev68-alpha-cpu"}
    ;;

ppc)
    LINKER_EMULATION=${LINKER_EMULATION:-elf32ppc}
    QEMU_MACHINE=${QEMU_MACHINE:-$(printf "%s " \
        '-M ref405ep')}
    MARCH_FLAGS=${MARCH_FLAGS:--mcpu=750}
    QEMU_SMP=1
    QEMU_RAM=128M
    BIOS_IS_UBOOT=1
    #BIOS_IS_ELF=1
    QEMU_CPU=${QEMU_CPU:-"-device pci-serial -cpu 750"} #-device pci-serial"}
    ;;

x86_64)
    LINKER_EMULATION=${LINKER_EMULATION:-elf_${ARCH}}
    MARCH_FLAGS=${MARCH_FLAGS:-}
    GDB_EXTRA_STARTUP_CMD='-ex '$'\'''set architecture i386:x86-64'$'\''
    ;;
    
i386)
    # Force it back to x86_64 toolchain, but use m32
    #COMPILER_PREFIX=x86_64-$HOSTOS-
    LINKER_EMULATION=${LINKER_EMULATION:-elf_${ARCH}}
    MARCH_FLAGS=${MARCH_FLAGS:--march=i686}
    GDB_EXTRA_STARTUP_CMD='-ex '$'\'''set architecture i386'$'\''
    ;;
    
riscv64)
    QEMU_CPU=${QEMU_CPU:-"-cpu rv64"}
    QEMU_MACHINE=${QEMU_MACHINE:-$(printf "%s " \
        "-M virt" \
        "-cpu rv64")} \
    LINKER_EMULATION=elf64lriscv
    MARCH_FLAGS=${MARCH_FLAGS:-$(printf "%s " \
            "-march=rv64imafdc" \
            "-mabi=lp64d" \
            "-mcmodel=medany")}
    GDB_EXTRA_STARTUP_CMD='-ex '$'\'''set architecture riscv:rv64'$'\''
esac

declare -A PROGRAMS=(
    ["CXX"]=${CXX:-${COMPILER_PREFIX}g++}
    ["OBJCOPY"]=${OBJCOPY:-${COMPILER_PREFIX}objcopy}
    ["OBJDUMP"]=${OBJDUMP:-${COMPILER_PREFIX}objdump}
    ["NM"]=${NM:-${COMPILER_PREFIX}gcc-nm}
    ["GDB"]=${GDB:-${COMPILER_PREFIX}gdb}
    ["QEMU"]=${QEMU:-qemu-system-$ARCH}
    ["LN"]=${LN:-ln}
    ["CP"]=${CP:-cp}
    ["CAT"]=${CAT:-cat}
    ["CHMOD"]=${CHMOD:-chmod}
    ["GREP"]=${GREP:-grep}
    ["BOCHS"]=${BOCHS:-bochs}
    ["CMP"]=${CMP:-cmp}
    ["RM"]=${RM:-rm}
    ["MV"]=${MV:-mv}
    ["REALPATH"]=${REALPATH:-realpath}
    ["TOUCH"]=${TOUCH:-touch}
    ["LESS"]=${LESS:-less}
    ["SORT"]=${SORT:-sort}
)

declare -A nofail_program=(
    ["GDB"]=1
)

# Create variables from what `which` returns for them all
for name in "${!PROGRAMS[@]}"; do
    value="${PROGRAMS[$name]}"
    loc=$("$WHICH" -- "$value") \
        || [[ -n ${nofail_program[$name]} ]] \
        || fail "Failed to find $value for $name"
    
    PROGRAMS[$name]=$loc
    
    eval "$name=$loc"
done

declare -A LIBGCC_ARCH_ARGS=(
    ["x86_64"]=""
    ["i386"]="-m32"
    ["aarch64"]=""
    ["riscv64"]=""
    ["m68k"]="-march=68060"
    ["mips"]=""
    ["mips64"]=""
    ["alpha"]=""
)

if [[ $LIBGCC == "" ]]; then
    LIBGCC=$("$CXX" ${LIBGCC_ARCH_ARGS[${ARCH}]} \
        -print-libgcc-file-name) || \
        fail 'getting libgcc path failed'
fi

#
# Detect stuff from qemu

function run_monitor_commands() {
    ${TRUNCATE:-truncate} --size=2M rom-dummy
    printf '%s\n' "$@" | \
        log "$QEMU" -bios rom-dummy -device secondary-vga \
            $QEMU_MACHINE $QEMU_CPU -m ${QEMU_RAM:-1536M} \
        \
        -monitor stdio | grep -vP '\x1b' || exit
}

log printf "%s\n" "Qemu device list is in configure.devices.log"
log "${QEMU}" -device help > "configure.devices.log"
run_monitor_commands 'info mtree' 'q' > "configure.mtree.log" \
    || fail info mtree failed
run_monitor_commands 'info qtree' 'info pci' 'q' > "configure.info.log" \
    || fail info qtree failed

function detect_address_range() {
    local searchterm="$1"
    pattern='address-space: cpu-memory-0'
    securepattern='address-space: cpu-secure-memory-0'
    donepattern='^address-space: '
    matchpattern='([0-9a-fA-F]+-[0-9a-fA-F]+)'
    crpattern='\x1b'
    local in_machine=0
    while read -d$'\n' line; do
        [[ $line =~ $crpattern ]] \
            && echo skipped \
            && continue
        
        if [[ $in_machine -eq 0 ]]; then
            if [[ ${line} =~ ${pattern} ]] \
                    || [[ $line =~ $securepattern ]]; then
                in_machine=1
                continue
            fi
        elif [[ ${line} =~ ${searchterm} ]]; then
            if [[ ${line} =~ ${matchpattern} ]]; then
                printf '%s' "${BASH_REMATCH[1]}"
                exit
            fi
        elif [[ ${line} =~ ${donepattern} ]]; then
            in_machine=0
            continue
        fi
    done < "configure.mtree.log"
}

function striphex() {
    local p='^0*?([0-9a-fA-F]+)$'
    [[ $v =~ $p ]] && \
        printf "0x%s" "${BASH_REMATCH[1]}"
}

function address_range_st() {
    local v=${1%%-*}
    printf '%s' "$(striphex "$v")"
}

function address_range_lb() {
    local v=${1#*-}
    printf '%s' "$(striphex "$v")"
}

#cat "$TMPCFGFILE"

#
# Prepare all the defines in an associative array

declare -A DEFINES=()

declare -A ranges=(
    ["ecam"]=pcie-ecam
    ["ioport"]=ioport
    ["ram"]=\.ram
    ["serial"]='serial|pl011'
    ["fwcfgdma"]=fwcfg.dma
    ["pciconfidx"]=pci-conf-idx
    ["pciconfdat"]='pci-conf-data|pci-data-idx'
    ["vbe"]=vbe
    ["fwcfg_ctl"]=fwcfg.ctl
    ["fwcfg_data"]=fwcfg.data
    ["hole"]='pci-mmio|pcie-mmio'
    ["gt64120_isd"]="gt64120-isd"
)

for name in "${!ranges[@]}"; do
    ranges[${name}]=$(detect_address_range "${ranges[${name}]}")
done

for range in "${!ranges[@]}"; do
    value="${ranges[$range]}"
    [[ -z $value ]] && continue
    printf "%10s range is %s to %s\n" \
        "${range^^}" "$(address_range_st "${value}")" \
        "$(address_range_lb "${value}")"
    name=${range^^}
    namest="${name}_ST"
    namelb="${name}_LB"
    DEFINES[${namest}]="$(address_range_st "${value}")"
    DEFINES[${namelb}]="$(address_range_lb "${value}")"
done

#
# Generate compile-time constants

trap '"$RM" -f "$TMPCFGFILE"' EXIT

TMPCFGFILE=$(mktemp) || fail "Could not create temp file"

printf '// This file is automatically generated\n' >> "$TMPCFGFILE"
for define in "${!DEFINES[@]}"; do
    value="${DEFINES[${define}]}"
    printf '#define %s %s\n' \
            "${define}" \
            "${value}" >> "${TMPCFGFILE}"
done

[[ -f build_includes/build.config.h ]] && \
    "${MV}" build_includes/build.config.h \
        build_includes/build.config.h-orig \
        || fail 'Could not move bulld config'
mkdir -p build_includes || fail 'Cannot mkdir build_includes'
"${SORT}" < "${TMPCFGFILE}" > build_includes/build.config.h || \
    fail 'Failed to place generated config file in build directory'
if "${CMP}" -s \
        build_includes/build.config.h \
        build_includes/build.config.h-orig; then
    "${MV}" -f build_includes/build.config.h-orig build_includes/build.config.h
fi

#
# Create config.mk

trap '"$RM" -f "$TMPFILE"' EXIT

TMPFILE=$(mktemp) || fail 'Could not create temp file'

BUILD_INCLUDES=$(realpath build_includes)

declare -a PASSTHRU=(
    "ARCH"
    "MARCH_FLAGS"
    "LINKER_EMULATION"
    "QEMU_MACHINE"
    "QEMU_CPU"
    "QEMU_SMP"
    "QEMU_RAM"
    "HOSTOS"
    "SRC_DIR"
    "COMPILER_PREFIX"
    "LIBGCC"
    "DEBUG_CON"
    "GDB_EXTRA_STARTUP_CMD"
    "BUILD_INCLUDES"
    "BIOS_IS_ELF"
)

printf '# This file was automatically generated by %s/configure\n' \
        "${SRC_DIR}" >> "$TMPFILE" || fail 'Unable to create new config.mk'

for name in "${PASSTHRU[@]}"; do
    printf 'export %s=%s\n' "$name" "${!name}" >> "$TMPFILE" || \
        fail 'Write error generating config.mk'
done

for name in "${!PROGRAMS[@]}"; do
    printf 'export %s=%s\n' "$name" "${PROGRAMS[$name]}" >> "$TMPFILE" || \
            fail 'Write error'
done

if ! "$CMP" -s "$TMPFILE" config.mk; then
    echo 'Updated config.mk'
    "$MV" -f "$TMPFILE" config.mk || fail 'Moving config.mk into place failed'
else
    "$TOUCH" config.mk || fail 'Touching config.mk failed'
fi

if ! "$CMP" -s "${SRC_DIR}/Makefile" Makefile; then
    echo 'Updated makefile'
    "$CP" -u --preserve=timestamps "${SRC_DIR}/Makefile" Makefile || \
            fail 'Unable to update Makefile'
fi

echo Configure done

# Close separate script stdout
exec 3>&-
